//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace LeanFT_Exam_Paulo_Estanqueiro
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "14.53")]
	public class Login : AppModelBase
	{
		#region Constructors

		public Login(ITestObject contextTestObject)
		{
			Name = @"Login";
			pageCommons = new pageCommonsNode(contextTestObject, this);
			pageHomeMahara = new pageHomeMaharaNode(contextTestObject, this);
			pageLoggedUser = new pageLoggedUserNode(contextTestObject, this);
			pageAddUser = new pageAddUserNode(contextTestObject, this);
			pageNewAccount = new pageNewAccountNode(contextTestObject, this);
			pageDashboard = new pageDashboardNode(contextTestObject, this);
			pageLegal = new pageLegalNode(contextTestObject, this);
			pageAgreements = new pageAgreementsNode(contextTestObject, this);
			pagePeople = new pagePeopleNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public pageCommonsNode pageCommons { get; private set; }
		public pageHomeMaharaNode pageHomeMahara { get; private set; }
		public pageLoggedUserNode pageLoggedUser { get; private set; }
		public pageAddUserNode pageAddUser { get; private set; }
		public pageNewAccountNode pageNewAccount { get; private set; }
		public pageDashboardNode pageDashboard { get; private set; }
		public pageLegalNode pageLegal { get; private set; }
		public pageAgreementsNode pageAgreements { get; private set; }
		public pagePeopleNode pagePeople { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class pageCommonsNode : PageNodeBase
		{
			#region Constructors
		
			public pageCommonsNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				btnMainMenu = new btnMainMenuNode(this, applicationModel);
				lnkDashboard = new lnkDashboardNode(this, applicationModel);
				lnkLogout = new lnkLogoutNode(this, applicationModel);
				DisplayName = @"Commons Elements - Mahara Demo";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public btnMainMenuNode btnMainMenu { get; private set; }
			public lnkDashboardNode lnkDashboard { get; private set; }
			public lnkLogoutNode lnkLogout { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class btnMainMenuNode : ButtonNodeBase
			{
				#region Constructors
			
				public btnMainMenuNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Show main menu";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription {
					TagName = @"BUTTON",
					XPath = @"//HEADER[1]/DIV[1]/DIV[1]/DIV[2]/BUTTON[1]"
				};
				}
			
				#endregion
			
			}

			public sealed class lnkDashboardNode : LinkNodeBase
			{
				#region Constructors
			
				public lnkDashboardNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Dashboard";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					TagName = @"A",
					XPath = @"//LI/A[normalize-space()=""Dashboard""]"
				};
				}
			
				#endregion
			
			}

			public sealed class lnkLogoutNode : LinkNodeBase
			{
				#region Constructors
			
				public lnkLogoutNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Logout";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					Id = @"logoutbutton",
					CSSSelector = @"#logoutbutton"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class pageHomeMaharaNode : PageNodeBase
		{
			#region Constructors
		
			public pageHomeMaharaNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				inpUsername = new inpUsernameNode(this, applicationModel);
				inpPassword = new inpPasswordNode(this, applicationModel);
				btnLogin = new btnLoginNode(this, applicationModel);
				msgLoggedOut = new msgLoggedOutNode(this, applicationModel);
				DisplayName = @"Home - Mahara Demo";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public inpUsernameNode inpUsername { get; private set; }
			public inpPasswordNode inpPassword { get; private set; }
			public btnLoginNode btnLogin { get; private set; }
			public msgLoggedOutNode msgLoggedOut { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class inpUsernameNode : EditFieldNodeBase
			{
				#region Constructors
			
				public inpUsernameNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"login_username";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription {
					Id = @"login_login_username"
				};
				}
			
				#endregion
			
			}

			public sealed class inpPasswordNode : EditFieldNodeBase
			{
				#region Constructors
			
				public inpPasswordNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"login_password";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription {
					Id = @"login_login_password"
				};
				}
			
				#endregion
			
			}

			public sealed class btnLoginNode : ButtonNodeBase
			{
				#region Constructors
			
				public btnLoginNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Login";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription {
					ButtonType = @"submit",
					Id = @"login_submit"
				};
				}
			
				#endregion
			
			}

			public sealed class msgLoggedOutNode : WebElementNodeBase
			{
				#region Constructors
			
				public msgLoggedOutNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"You have been logged out successfully";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"DIV",
					XPath = @"//DIV[@id=""messages""]/DIV[1]/DIV[1]",
					Index = 1
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class pageLoggedUserNode : PageNodeBase
		{
			#region Constructors
		
			public pageLoggedUserNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				strUser = new strUserNode(this, applicationModel);
				lnkAdminMenu = new lnkAdminMenuNode(this, applicationModel);
				lnkPeople = new lnkPeopleNode(this, applicationModel);
				lnkAddUser = new lnkAddUserNode(this, applicationModel);
				lnkLegal = new lnkLegalNode(this, applicationModel);
				DisplayName = @"Logged Page - Mahara Demo";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public strUserNode strUser { get; private set; }
			public lnkAdminMenuNode lnkAdminMenu { get; private set; }
			public lnkPeopleNode lnkPeople { get; private set; }
			public lnkAddUserNode lnkAddUser { get; private set; }
			public lnkLegalNode lnkLegal { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class strUserNode : LinkNodeBase
			{
				#region Constructors
			
				public strUserNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Logged User";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					TagName = @"A",
					CSSSelector = @"div#sb-profile > div > h3 > a:nth-child(1)"
				};
				}
			
				#endregion
			
			}

			public sealed class lnkAdminMenuNode : WebElementNodeBase
			{
				#region Constructors
			
				public lnkAdminMenuNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Link Admin Menu";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"SPAN",
					XPath = @"//BUTTON[2]/SPAN[@role=""presentation""][1]"
				};
				}
			
				#endregion
			
			}

			public sealed class lnkPeopleNode : LinkNodeBase
			{
				#region Constructors
			
				public lnkPeopleNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Link People";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					TagName = @"A",
					XPath = @"//UL[@id=""navadmin""]/LI[1]/A[1]"
				};
				}
			
				#endregion
			
			}

			public sealed class lnkAddUserNode : LinkNodeBase
			{
				#region Constructors
			
				public lnkAddUserNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Link Add User";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					TagName = @"A",
					XPath = @"//LI/A[normalize-space()=""Add user""]"
				};
				}
			
				#endregion
			
			}

			public sealed class lnkLegalNode : LinkNodeBase
			{
				#region Constructors
			
				public lnkLegalNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Legal";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					TagName = @"A",
					XPath = @"//FOOTER[1]/DIV[1]/UL[1]/LI[1]/A[1]"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class pageAddUserNode : PageNodeBase
		{
			#region Constructors
		
			public pageAddUserNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				inpFirstName = new inpFirstNameNode(this, applicationModel);
				inpLastName = new inpLastNameNode(this, applicationModel);
				inpEmail = new inpEmailNode(this, applicationModel);
				inpUsername = new inpUsernameNode(this, applicationModel);
				inpPassword = new inpPasswordNode(this, applicationModel);
				btnAdd = new btnAddNode(this, applicationModel);
				DisplayName = @"Add User - Mahara Demo";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public inpFirstNameNode inpFirstName { get; private set; }
			public inpLastNameNode inpLastName { get; private set; }
			public inpEmailNode inpEmail { get; private set; }
			public inpUsernameNode inpUsername { get; private set; }
			public inpPasswordNode inpPassword { get; private set; }
			public btnAddNode btnAdd { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class inpFirstNameNode : EditFieldNodeBase
			{
				#region Constructors
			
				public inpFirstNameNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"firstname";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription {
					Id = @"adduser_firstname"
				};
				}
			
				#endregion
			
			}

			public sealed class inpLastNameNode : EditFieldNodeBase
			{
				#region Constructors
			
				public inpLastNameNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"lastname";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription {
					Id = @"adduser_lastname"
				};
				}
			
				#endregion
			
			}

			public sealed class inpEmailNode : EditFieldNodeBase
			{
				#region Constructors
			
				public inpEmailNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"email";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription {
					Id = @"adduser_email"
				};
				}
			
				#endregion
			
			}

			public sealed class inpUsernameNode : EditFieldNodeBase
			{
				#region Constructors
			
				public inpUsernameNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"username";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription {
					Id = @"adduser_username"
				};
				}
			
				#endregion
			
			}

			public sealed class inpPasswordNode : EditFieldNodeBase
			{
				#region Constructors
			
				public inpPasswordNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"password";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription {
					Id = @"adduser_password"
				};
				}
			
				#endregion
			
			}

			public sealed class btnAddNode : ButtonNodeBase
			{
				#region Constructors
			
				public btnAddNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Button Add";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription {
					Id = @"adduser_submit"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class pageNewAccountNode : PageNodeBase
		{
			#region Constructors
		
			public pageNewAccountNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				strAddSuccessful = new strAddSuccessfulNode(this, applicationModel);
				btnUserMenu = new btnUserMenuNode(this, applicationModel);
				DisplayName = @"Account Created - Mahara Demo";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public strAddSuccessfulNode strAddSuccessful { get; private set; }
			public btnUserMenuNode btnUserMenu { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class strAddSuccessfulNode : WebElementNodeBase
			{
				#region Constructors
			
				public strAddSuccessfulNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"User Created";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"DIV",
					XPath = @"//DIV[@id=""messages""]/DIV[1]/DIV[1]",
					Index = 1
				};
				}
			
				#endregion
			
			}

			public sealed class btnUserMenuNode : ButtonNodeBase
			{
				#region Constructors
			
				public btnUserMenuNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"User Menu";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription {
					TagName = @"BUTTON",
					XPath = @"//HEADER[1]/DIV[1]/DIV[1]/DIV[2]/BUTTON[3]"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class pageDashboardNode : PageNodeBase
		{
			#region Constructors
		
			public pageDashboardNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				strNewUser = new strNewUserNode(this, applicationModel);
				strNewPasswordSaved = new strNewPasswordSavedNode(this, applicationModel);
				strDashboard = new strDashboardNode(this, applicationModel);
				btnUserMenu = new btnUserMenuNode(this, applicationModel);
				lnkEngage = new lnkEngageNode(this, applicationModel);
				lnkPeople = new lnkPeopleNode(this, applicationModel);
				DisplayName = @"Dashboard - Mahara Demo";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public strNewUserNode strNewUser { get; private set; }
			public strNewPasswordSavedNode strNewPasswordSaved { get; private set; }
			public strDashboardNode strDashboard { get; private set; }
			public btnUserMenuNode btnUserMenu { get; private set; }
			public lnkEngageNode lnkEngage { get; private set; }
			public lnkPeopleNode lnkPeople { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class strNewUserNode : LinkNodeBase
			{
				#region Constructors
			
				public strNewUserNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Paula Paulsen";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					TagName = @"A",
					XPath = @"//DIV[@id=""sb-profile""]/DIV/H3[normalize-space()=""Paula Paulsen""]/A[1]"
				};
				}
			
				#endregion
			
			}

			public sealed class strNewPasswordSavedNode : WebElementNodeBase
			{
				#region Constructors
			
				public strNewPasswordSavedNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Your new password has been saved";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"DIV",
					XPath = @"//DIV[@id=""messages""]/DIV[1]/DIV[1]"
				};
				}
			
				#endregion
			
			}

			public sealed class strDashboardNode : ButtonNodeBase
			{
				#region Constructors
			
				public strDashboardNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Edit dashboard";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription {
					Id = @"editdashboard"
				};
				}
			
				#endregion
			
			}

			public sealed class btnUserMenuNode : ButtonNodeBase
			{
				#region Constructors
			
				public btnUserMenuNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"                                Show user menu                                                            ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription {
					TagName = @"BUTTON",
					XPath = @"//HEADER[1]/DIV[1]/DIV[1]/DIV[2]/BUTTON[2]"
				};
				}
			
				#endregion
			
			}

			public sealed class lnkEngageNode : LinkNodeBase
			{
				#region Constructors
			
				public lnkEngageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Engage";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					TagName = @"A",
					XPath = @"//LI/A[normalize-space()=""Engage""]"
				};
				}
			
				#endregion
			
			}

			public sealed class lnkPeopleNode : LinkNodeBase
			{
				#region Constructors
			
				public lnkPeopleNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"People";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					TagName = @"A",
					XPath = @"//LI/A[normalize-space()=""People""]",
					Index = 0
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class pageLegalNode : PageNodeBase
		{
			#region Constructors
		
			public pageLegalNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				strLegal = new strLegalNode(this, applicationModel);
				statePrivacy = new statePrivacyNode(this, applicationModel);
				stateTerms = new stateTermsNode(this, applicationModel);
				btnSaveChanges = new btnSaveChangesNode(this, applicationModel);
				DisplayName = @"Legal - Mahara Demo";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public strLegalNode strLegal { get; private set; }
			public statePrivacyNode statePrivacy { get; private set; }
			public stateTermsNode stateTerms { get; private set; }
			public btnSaveChangesNode btnSaveChanges { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class strLegalNode : WebElementNodeBase
			{
				#region Constructors
			
				public strLegalNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Legal ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"SPAN",
					XPath = @"//DIV[@id=""main-column-container""]/H1[1]/SPAN[2]"
				};
				}
			
				#endregion
			
			}

			public sealed class statePrivacyNode : WebElementNodeBase
			{
				#region Constructors
			
				public statePrivacyNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Privacy Statement";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"SPAN",
					XPath = @"//DIV[@id=""agreetoprivacy_maharaprivacy_container""]/DIV[1]/DIV[1]/LABEL[1]/SPAN[4]",
					Index = 0
				};
				}
			
				#endregion
			
			}

			public sealed class stateTermsNode : WebElementNodeBase
			{
				#region Constructors
			
				public stateTermsNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Terms and Conditions";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"SPAN",
					XPath = @"//DIV[@id=""agreetoprivacy_maharatermsandconditions_container""]/DIV[1]/DIV[1]/LABEL[1]/SPAN[4]",
					Index = 1
				};
				}
			
				#endregion
			
			}

			public sealed class btnSaveChangesNode : ButtonNodeBase
			{
				#region Constructors
			
				public btnSaveChangesNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Save changes";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription {
					Id = @"agreetoprivacy_submit"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class pageAgreementsNode : PageNodeBase
		{
			#region Constructors
		
			public pageAgreementsNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				strPrivacyAgreementSaved = new strPrivacyAgreementSavedNode(this, applicationModel);
				strTermsAgreementSaved = new strTermsAgreementSavedNode(this, applicationModel);
				inpPassword1 = new inpPassword1Node(this, applicationModel);
				inpPassword2 = new inpPassword2Node(this, applicationModel);
				btnSubmit = new btnSubmitNode(this, applicationModel);
				DisplayName = @"Agreements and Change Password - Mahara Demo";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public strPrivacyAgreementSavedNode strPrivacyAgreementSaved { get; private set; }
			public strTermsAgreementSavedNode strTermsAgreementSaved { get; private set; }
			public inpPassword1Node inpPassword1 { get; private set; }
			public inpPassword2Node inpPassword2 { get; private set; }
			public btnSubmitNode btnSubmit { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class strPrivacyAgreementSavedNode : WebElementNodeBase
			{
				#region Constructors
			
				public strPrivacyAgreementSavedNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Privacy Agreement saved";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"DIV",
					XPath = @"//DIV[@id=""messages""]/DIV[1]/DIV[1]",
					Index = 0
				};
				}
			
				#endregion
			
			}

			public sealed class strTermsAgreementSavedNode : WebElementNodeBase
			{
				#region Constructors
			
				public strTermsAgreementSavedNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Terms and Conditions Agreement saved";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"DIV",
					XPath = @"//DIV[@id=""messages""]/DIV[2]/DIV[1]",
					Index = 1
				};
				}
			
				#endregion
			
			}

			public sealed class inpPassword1Node : EditFieldNodeBase
			{
				#region Constructors
			
				public inpPassword1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"password1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription {
					Id = @"requiredfields_password1"
				};
				}
			
				#endregion
			
			}

			public sealed class inpPassword2Node : EditFieldNodeBase
			{
				#region Constructors
			
				public inpPassword2Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"password2";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription {
					Id = @"requiredfields_password2"
				};
				}
			
				#endregion
			
			}

			public sealed class btnSubmitNode : ButtonNodeBase
			{
				#region Constructors
			
				public btnSubmitNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Submit";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription {
					Id = @"requiredfields_submit"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class pagePeopleNode : PageNodeBase
		{
			#region Constructors
		
			public pagePeopleNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				strPeople = new strPeopleNode(this, applicationModel);
				tblResultsAll = new tblResultsAllNode(this, applicationModel);
				arrResultNames = new arrResultNamesNode(this, applicationModel);
				DisplayName = @"People - Mahara Demo";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public strPeopleNode strPeople { get; private set; }
			public tblResultsAllNode tblResultsAll { get; private set; }
			public arrResultNamesNode arrResultNames { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class strPeopleNode : WebElementNodeBase
			{
				#region Constructors
			
				public strPeopleNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"People ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"SPAN",
					XPath = @"//DIV[@id=""main-column-container""]/H1[1]/SPAN[2]"
				};
				}
			
				#endregion
			
			}

			public sealed class tblResultsAllNode : WebElementNodeBase
			{
				#region Constructors
			
				public tblResultsAllNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Results All People";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					TagName = @"DIV",
					Id = @"friendslist",
					XPath = @"//DIV[@id=""friendslist""]"
				};
				}
			
				#endregion
			
			}

			public sealed class arrResultNamesNode : WebElementNodeBase
			{
				#region Constructors
			
				public arrResultNamesNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"First Page Results";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					XPath = @"//DIV[@id=""friendslist""]//h4/a/span"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public abstract class WebElementNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IWebElement, HP.LFT.SDK.Web.WebElementDescription>, HP.LFT.SDK.Web.IWebElement
		{
			public WebElementNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string AccessibilityName
			{
				get { return Concrete.AccessibilityName; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			#endregion
		}

		public abstract class EditFieldNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IEditField, HP.LFT.SDK.Web.EditFieldDescription>, HP.LFT.SDK.Web.IEditField
		{
			public EditFieldNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void SetSecure(string encodedText)
			{
				 Concrete.SetSecure(encodedText);
			}
	
			public void Submit()
			{
				 Concrete.Submit();
			}
	
			public void SetValue(string text)
			{
				 Concrete.SetValue(text);
			}
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string DefaultValue
			{
				get { return Concrete.DefaultValue; }		
			}
	
			public int MaxLength
			{
				get { return Concrete.MaxLength; }		
			}
	
			public string Pattern
			{
				get { return Concrete.Pattern; }		
			}
	
			public uint RowsCount
			{
				get { return Concrete.RowsCount; }		
			}
	
			public string Type
			{
				get { return Concrete.Type; }		
			}
	
			public string Value
			{
				get { return Concrete.Value; }		
			}
	
			public string Placeholder
			{
				get { return Concrete.Placeholder; }		
			}
	
			public bool IsReadOnly
			{
				get { return Concrete.IsReadOnly; }		
			}
	
			public bool IsRequired
			{
				get { return Concrete.IsRequired; }		
			}
	
			public uint MaxCharsInLine
			{
				get { return Concrete.MaxCharsInLine; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string AccessibilityName
			{
				get { return Concrete.AccessibilityName; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			#endregion
		}

		public abstract class LinkNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.ILink, HP.LFT.SDK.Web.LinkDescription>, HP.LFT.SDK.Web.ILink
		{
			public LinkNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Href
			{
				get { return Concrete.Href; }		
			}
	
			public string Target
			{
				get { return Concrete.Target; }		
			}
	
			public string FontName
			{
				get { return Concrete.FontName; }		
			}
	
			public string BackgroundColor
			{
				get { return Concrete.BackgroundColor; }		
			}
	
			public string Color
			{
				get { return Concrete.Color; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string AccessibilityName
			{
				get { return Concrete.AccessibilityName; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			#endregion
		}

		public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IButton, HP.LFT.SDK.Web.ButtonDescription>, HP.LFT.SDK.Web.IButton
		{
			public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string ButtonType
			{
				get { return Concrete.ButtonType; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string AccessibilityName
			{
				get { return Concrete.AccessibilityName; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			#endregion
		}

		public abstract class PageNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IPage, HP.LFT.SDK.Web.PageDescription>, HP.LFT.SDK.Web.IPage
		{
			public PageNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public TResult RunJavaScript<TResult>(string scriptToRun) 
			{
				return Concrete.RunJavaScript<TResult>(scriptToRun);
			}
	
			public string RunJavaScript(string scriptToRun)
			{
				return Concrete.RunJavaScript(scriptToRun);
			}
	
			public void Sync()
			{
				 Concrete.Sync();
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Url
			{
				get { return Concrete.Url; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			#endregion
		}

		#endregion
	}
}
